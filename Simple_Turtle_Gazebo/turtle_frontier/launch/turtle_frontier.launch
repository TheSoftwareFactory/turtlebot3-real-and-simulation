<?xml version="1.0" ?>
<launch>

   <master auto="start"/>

    <node name="map_server" pkg="map_server" type="map_server" args="$(find turtle_gazebo)/worlds/turtle.world"/>

 
    <include file="$(find amcl)/examples/amcl_omni.launch" />
  
    <arg name="sensor_range" default="6.0"/>

    <node pkg="frontier_exploration" type="explore_client" name="explore_client" output="screen"/>

    <node pkg="frontier_exploration" type="explore_server" name="explore_server" output="screen" >

        <param name="frequency" type="double" value="2.0"/>
        <param name="goal_aliasing" type="double" value="$(arg sensor_range)"/>

   <!--     
       <rosparam ns="explore_costmap" subst_value="true"/>
        <rosparam file="$(find turtle_frontier)/config/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(find turtle_frontier)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find turtle_frontier)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find turtle_frontier)/config/global_costmap_params.yaml" command="load" /> 
        <rosparam file="$(find turtle_frontier)/config/base_local_planner_params.yaml" command="load" />
-->
<rosparam ns="explore_costmap" subst_value="true">
            footprint: [[0.0685, 0.0685], [-0.0685, 0.0685], [-0.0685, -0.0685], [0.0685, -0.0685]]
            #robot_radius: 0.10
            
            transform_tolerance: 0.5
            update_frequency: 5.5
            publish_frequency: 20

            #must match incoming static map
            global_frame: /map
            robot_base_frame: link_0
            resolution: 0.05

            rolling_window: false
            track_unknown_space: true

            plugins: 

                - {name: static,           type: "costmap_2d::StaticLayer"}            
                - {name: explore_boundary, type: "frontier_exploration::BoundedExploreLayer"}
                #Can disable sensor layer if gmapping is fast enough to update scans
                - {name: sensor,           type: "costmap_2d::ObstacleLayer"}
                - {name: inflation,        type: "costmap_2d::InflationLayer"}

            static:
                #Can pull data from gmapping, map_server or a non-rolling costmap            
                map_topic: /map
                # map_topic: move_base/global_costmap/costmap   
                subscribe_to_updates: true

            explore_boundary:
                resize_to_boundary: false
                frontier_travel_point: middle
                #set to false for gmapping, true if re-exploring a known area
                explore_clear_space: false

            sensor:
                observation_sources: laser
                laser: {data_type: LaserScan, clearing: true, marking: true, topic: scan, inf_is_valid: true, raytrace_range: $(arg sensor_range), obstacle_range: $(arg sensor_range)}

            inflation:
                inflation_radius: 0.15
      </rosparam>
     </node>

</launch>
